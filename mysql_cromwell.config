
### Configure Cromwell MySQL database on Computerome ###

This guide will take you through configuring a MySQL database through a tunnel from Computerome to the old CBS system (i.e. padawan and others). The MySQL database is already setup but since the tunnel is use-specific this needs to be setup for each new user.


First setup the tunneling on Computerome via. the guide by PWS:
http://teaching.bioinformatics.dtu.dk/material/36612/MysqlComputerome.pdf


Basically just only the ssh passwordless login is needed. Check that this is working by running something like:
krdav@computerome01:~$ ssh krdav@login.cbs.dtu.dk
Last login: Tue Sep 12 13:54:11 2017 from 130.226.24.3
Have a lot of fun...
krdav@padawan:~>


You might get prompted for your passphrase. This can be avoided by adding it like this:
eval `ssh-agent -s`
ssh-add


Now setup your ~/.my.cnf on Computerome, like this example:
krdav@computerome01:~$ cat .my.cnf
[client]
user      = krdav
password  = 123456781!aA
host      = 127.0.0.1
port      = 2801
[mysql]
pager     = less

^Here you just substitute my user <krdav> with your login at the old CBS system. Set file permissions to 600.


Now verify your ~/.my.cnf on the old CBS system is in order. Here is how it should look like:
krdav@padawan:~> cat .my.cnf
[client]
password  = XXXXXX
port      = 3306
host      = mysql

^Your password will be different, of course. Be sure to set file permissions to 600.


Now you should be setup with the tunnel and MySQL configuration. Then you just need to load latest version MariaDB, e.g.:
module load mariadb/10.1.23


And start the tunnel with the following shell script:
#!/bin/tcsh
set mac = (`ip link | gawk '/link\/ether/ {gsub(":",""); print $2; exit;}'`)
if ( $1 == 'start' ) then
  if ( -e $HOME/.mysqltun.pid.$mac ) then
    echo "The pid file already exists, tunnel is probably running"
  else
    set param = (`gawk '/^user/{u=$3;}/^port/{p=$3;}END{print u, p;}' $HOME/.my.cnf`)
    echo $param
    ssh -N -L {$param[2]}:mysql.cbs.dtu.dk:3306 {$param[1]}@login.cbs.dtu.dk &
    echo $! > $HOME/.mysqltun.pid.$mac
  endif
else if ( $1 == 'stop' ) then
  if ( -e $HOME/.mysqltun.pid.$mac ) then
    set pid = `cat $HOME/.mysqltun.pid.$mac`
    kill $pid
    rm $HOME/.mysqltun.pid.$mac
  else
    echo "No pid file, tunnel is probably not running"
  endif
else
  echo "Usage: mysqltunnel [start|stop]"
endif

^Copy this into a file called "mysqltunnel" and give it execution permisions.


Now start the tunnel:
./mysqltunnel start

^This step is also described in the MySQL guide by PWS, the sublte difference between that guide and this is that we use a MySQL user called "cromwell" while the PWS guide assumes that the MySQL user is equivalent to the system username.


Test the tunnel on Computerome:
mysql -u cromwell -p

^The password is "123456781!aA".


Check out how much space our cromwell database takes up:
SELECT (data_length+index_length)/power(1024,2) tablesize_mb
FROM information_schema.tables
WHERE table_schema='cromwell_db';


Finally add the database STANZA to the Cromwell config file (if this is not already done):
database {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    # jdbc:oracle:<drivertype>:<user>/<password>@<database>
    url = "jdbc:mysql://localhost:2801/cromwell_db?useSSL=false&rewriteBatchedStatements=true"
    user = "cromwell"
    password = "123456781!aA"
    driver = "com.mysql.jdbc.Driver"
    connectionTimeout = 5000
  }
}


When Cromwell is run the first few lines will start a database connection like this:
[2017-09-12 13:42:04,59] [info] Running with database db.url = jdbc:mysql://localhost:2801/cromwell_db?useSSL=false&rewriteBatchedStatements=true
[2017-09-12 13:42:09,48] [info] Running with database db.url = jdbc:mysql://localhost:2801/cromwell_db?useSSL=false&rewriteBatchedStatements=true
[2017-09-12 13:42:09,99] [info] Slf4jLogger started




In case the entire database needs to be cleaned (i.e. all tables dropped) run this:
use cromwell_db;
DROP TABLE IF EXISTS CALL_CACHING_AGGREGATION_ENTRY;
DROP TABLE IF EXISTS CALL_CACHING_DETRITUS_ENTRY;
DROP TABLE IF EXISTS CALL_CACHING_ENTRY;
DROP TABLE IF EXISTS CALL_CACHING_HASH_ENTRY;
DROP TABLE IF EXISTS CALL_CACHING_SIMPLETON_ENTRY;
DROP TABLE IF EXISTS CUSTOM_LABEL_ENTRY;
DROP TABLE IF EXISTS DATABASECHANGELOG;
DROP TABLE IF EXISTS DATABASECHANGELOGLOCK;
DROP TABLE IF EXISTS DOCKER_HASH_STORE_ENTRY;
DROP TABLE IF EXISTS JOB_KEY_VALUE_ENTRY;
DROP TABLE IF EXISTS JOB_STORE_ENTRY;
DROP TABLE IF EXISTS JOB_STORE_SIMPLETON_ENTRY;
DROP TABLE IF EXISTS METADATA_ENTRY;
DROP TABLE IF EXISTS SQLMETADATADATABASECHANGELOG;
DROP TABLE IF EXISTS SQLMETADATADATABASECHANGELOGLOCK;
DROP TABLE IF EXISTS SUB_WORKFLOW_STORE_ENTRY;
DROP TABLE IF EXISTS SUMMARY_STATUS_ENTRY;
DROP TABLE IF EXISTS WORKFLOW_METADATA_SUMMARY_ENTRY;
DROP TABLE IF EXISTS WORKFLOW_STORE_ENTRY;







